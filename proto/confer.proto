syntax = "proto3";

package confer.v1;

// ConferService provides a gRPC API for managing configuration values.
service ConferService {
  // Get retrieves the configuration value associated with the given path.
  rpc Get(ConfigPath) returns (ConfigValue) {}

  // Set sets the configuration value for the given path.
  rpc Set(SetConfigRequest) returns (Empty) {}

  // Remove removes the configuration value associated with the given path.
  rpc Remove(ConfigPath) returns (Empty) {}

  // List lists all paths that start with the given path prefix.
  rpc List(ConfigPath) returns (ConfigList) {}

  // ------- Cluster operations ------------

  // Initializes a new Raft cluster with the given nodes
  rpc Init(InitRequest) returns (Empty) {}

  // AddLearner adds a new learner node to the Raft cluster
  rpc AddLearner(AddLearnerRequest) returns (ClientWriteResponse) {}

  // ChangeMembership modifies the cluster membership configuration
  rpc ChangeMembership(ChangeMembershipRequest) returns (ClientWriteResponse) {}

  // Metrics retrieves cluster metrics and status information
  //rpc Metrics(google.protobuf.Empty) returns (MetricsResponse) {}
}


//Custom empty message
message Empty {}

// ConfigpPath  represents the configuration Path/key to a value  
message ConfigPath {
  string path = 1;
}

// ConfigValue represents a configuration value as a byte array.
message ConfigValue {
  // The raw byte array value.
  bytes value = 1;
}

// ConfigList represents a list of configuration paths.
message ConfigList {
  // A list of configuration paths.
  repeated string paths = 1;
}

// SetConfigRequest represents a request to set a configuration value.
message SetConfigRequest {
    // The path of the configuration value.
    ConfigPath path = 1;
    // The configuration value.
    ConfigValue value = 2;
}

// ErrorDetails represents custom error details.
message ErrorDetails {
  // A detailed error message.
  string message = 1;
}

// Node represents a single node in the Raft cluster
message Node {
  // Unique identifier for the node
  uint64 node_id = 1;
  // RPC address for node communication
  string addr = 2;
}

// InitRequest contains the initial set of nodes for cluster initialization
message InitRequest {
  // List of initial cluster nodes
  repeated Node nodes = 1;
}

// AddLearnerRequest specifies parameters for adding a learner node
message AddLearnerRequest {
  // Node to be added as a learner
  Node node = 1;
}

// ChangeMembershipRequest specifies parameters for modifying cluster membership
message ChangeMembershipRequest {
  // New set of voter node IDs
  repeated uint64 members = 1;
  // Whether to retain existing configuration
  bool retain = 2;
}

message ClientWriteResponse {
  // The log id of the committed log entry.
  //LogId log_id = 1;

  // If the committed log entry is a normal one.
  //Response data = 2;

  // If the committed log entry is a change-membership entry.
  Membership membership = 3;
}

// LogId represents the log identifier in Raft
message LogId {
  uint64 term = 1;
  uint64 index = 2;
}

// Membership config
message Membership {
  // Joint(includes more than one NodeIdSet) or uniform(one NodeIdSet) config.
  repeated NodeIdSet configs = 1;

  // All of the nodes in the cluster, including voters and learners.
  // A node id that is included in `configs` is a voter, otherwise it is a learner.
  map<uint64, Node> nodes = 2;
}

// NodeIds is a set of NodeIds
message NodeIdSet {
  map<uint64, Empty> node_ids = 1;
}
